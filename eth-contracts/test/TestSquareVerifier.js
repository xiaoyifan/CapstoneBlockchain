// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
// Test verification with correct proof
// - use the contents from proof.json generated from zokrates steps
// Test verification with incorrect proof

var Test = require('../config/testConfig.js');

contract('Verifier', async (accounts) => {

    var config;
    var proof;
    var input;

    before('setup contract', async () => {
        config = await Test.Config(accounts);
        proof = config.proof;
        input = config.input;

        console.log("-----------------------------")
        console.log("Owner         accounts[0]  : ", config.owner);
        console.log("account_one   accounts[0]  : ", config.account_one);
        console.log("account_two   accounts[1]  : ", config.account_two);
        console.log("name                       : ", config.name);
        console.log("symbol                     : ", config.symbol);
        console.log("baseTokenURI               : ", config.baseTokenURI);
        console.log("-----------------------------")
        console.log("Verifier Address           : ", config.verifier.address);
        console.log("-----------------------------")


    });

    describe('verification with correct proof', function () {

        // Test verification with correct proof
        it('1. Verifier.verifyTx(..) returns true with correct proof', async () => {
            const result = await config.verifier.verifyTx.call(
                proof.A,
                proof.A_p,
                proof.B,
                proof.B_p,
                proof.C,
                proof.C_p,
                proof.H,
                proof.K,
                input
            )
            console.log("The result is :" + result)
            assert(result, 'Incorrect Proof results')
        })
    });

    describe('verification with incorrect proof', function () {

        // Test verification with incorrect proof
        it('2. Verifier.verifyTx(..) returns false with incorrect proof', async () => {
            // just change A_p with A
            const result = await config.verifier.verifyTx.call(
                proof.A_p,
                proof.A,
                proof.B,
                proof.B_p,
                proof.C,
                proof.C_p,
                proof.H,
                proof.K,
                input
            )
            console.log("The result is :" + result)
            assert(!result, 'Incorrect Proof results')
        })
    });

});
